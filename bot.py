# -*- coding: utf-8 -*-
"""bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rxHQ_IT3wUHwP6wXKXDYJEzTH1fAfcML
"""

pip install python-telegram-bot pandas

pip install python-telegram-bot --upgrade

import pandas as pd
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
import nest_asyncio

# Применяем nest_asyncio для разрешения запуска бота внутри уже работающего event loop
nest_asyncio.apply()

# Этапы разговора для команды /rate
WAITING_FOR_RATE_DATE = 1
WAITING_FOR_RATE_CURRENCY = 2

# Этапы разговора для команды /convert
WAITING_FOR_CONVERT_DATE = 3
WAITING_FOR_CONVERT_AMOUNT = 4
WAITING_FOR_CONVERT_FROM = 5
WAITING_FOR_CONVERT_TO = 6

# Функция для получения курса валют
def exchanger(date: str, cur: str) -> str:
    try:
        # Проверка формата даты
        parsed_date = datetime.strptime(date, "%d.%m.%Y")

        # Проверка, что год не превышает 2025
        if parsed_date.year > 2025:
            return "Некорректная дата: год не должен превышать 2025."

        # Проверка, что дата не в будущем
        today = datetime.today()
        if parsed_date > today:
            return "Некорректная дата: не заглядывайте в будущее:)"

        # Загрузка данных с сайта ЦБ РФ
        url = f"https://cbr.ru/currency_base/daily/?UniDbQuery.Posted=True&UniDbQuery.To={date}"
        df = pd.read_html(url, thousands='. ', decimal=',')[0]

        # Проверка наличия валюты
        if cur not in df['Букв. код'].to_numpy():
            available_currencies = ", ".join(df['Букв. код'].to_numpy())
            return f"Некорректный код валюты. Доступные валюты: {available_currencies}"

        # Получение курса
        row = df.loc[df['Букв. код'] == cur]
        rate = (row["Курс"] / row["Единиц"]).iloc[0]
        return f"Курс {cur} на {date}: {rate:.2f} руб."

    except ValueError:
        return "Некорректный формат даты. Используйте ДД.ММ.ГГГГ."
    except Exception as e:
        return f"Ошибка при обработке данных: {e}"


# Функция для конвертации валюты
def convert_currency(amount: float, from_currency: str, to_currency: str, date: str) -> str:
    try:
        # Загружаем таблицу валют для проверки доступных валют
        url = f"https://cbr.ru/currency_base/daily/?UniDbQuery.Posted=True&UniDbQuery.To={date}"
        df = pd.read_html(url, thousands='. ', decimal=',')[0]

        # Получаем список доступных валют
        available_currencies = df['Букв. код'].to_numpy()

        # Проверяем наличие валют в доступных
        if from_currency not in available_currencies or to_currency not in available_currencies:
            return f"Некорректный код валюты. Доступные валюты: {', '.join(available_currencies)}"

        if from_currency == "RUB" and to_currency != "RUB":
            # Получаем курс для перевода из рубля в целевую валюту
            rate = exchanger(date, to_currency)
            if "Ошибка" in rate:
                return rate
            rate = float(rate.split(":")[1].strip().split()[0])  # Извлекаем курс
            result = round(amount / rate, 2)
            return f"{amount} RUB = {result} {to_currency.upper()}"
        elif to_currency == "RUB" and from_currency != "RUB":
            # Получаем курс для перевода из исходной валюты в рубль
            rate = exchanger(date, from_currency)
            if "Ошибка" in rate:
                return rate
            rate = float(rate.split(":")[1].strip().split()[0])  # Извлекаем курс
            result = round(amount * rate, 2)
            return f"{amount} {from_currency.upper()} = {result} RUB"
        else:
            return f"Невозможно конвертировать между {from_currency.upper()} и {to_currency.upper()}"
    except Exception as e:
        return f"Ошибка при конвертации валюты: {e}"

# Обработчик команды /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "Привет! Я помогу узнать курс валют и конвертировать валюту. Используйте команды:\n"
        "/rate — Узнать курс валюты на дату\n"
        "/convert — Конвертировать валюту"
    )

# Начальный обработчик команды /rate
async def rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "Введите дату в формате: ДД.ММ.ГГГГ\nПример: 10.01.2024"
    )
    return WAITING_FOR_RATE_DATE

# Обработчик ввода даты для команды /rate
async def get_rate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        # Получаем дату от пользователя
        date = update.message.text.strip()

        # Проверка формата даты
        try:
            datetime.strptime(date, "%d.%m.%Y")
        except ValueError:
            await update.message.reply_text("Некорректный формат даты. Используйте ДД.ММ.ГГГГ.")
            return WAITING_FOR_RATE_DATE

        # Указываем, что теперь нужно ввести валюту
        await update.message.reply_text("Теперь введите код валюты (например, USD):")
        context.user_data['date'] = date  # Сохраняем дату для следующего шага
        return WAITING_FOR_RATE_CURRENCY

    except Exception as e:
        await update.message.reply_text(f"Произошла ошибка: {e}")
        return ConversationHandler.END

# Обработчик ввода валюты для команды /rate
async def get_currency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        # Получаем валюту от пользователя
        currency_code = update.message.text.strip().upper()
        date = context.user_data['date']

        # Получаем курс
        response = exchanger(date, currency_code)
        await update.message.reply_text(response)
        return ConversationHandler.END  # Завершаем разговор

    except Exception as e:
        await update.message.reply_text(f"Произошла ошибка: {e}")
        return ConversationHandler.END

# Начальный обработчик команды /convert
async def convert(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "Введите дату в формате: ДД.ММ.ГГГГ\nПример: 10.01.2024"
    )
    return WAITING_FOR_CONVERT_DATE

# Обработчик ввода даты для команды /convert
async def get_convert_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        # Получаем дату от пользователя
        date = update.message.text.strip()

        # Проверка формата даты
        try:
            datetime.strptime(date, "%d.%m.%Y")
        except ValueError:
            await update.message.reply_text("Некорректный формат даты. Используйте ДД.ММ.ГГГГ.")
            return WAITING_FOR_CONVERT_DATE

        context.user_data['date'] = date  # Сохраняем дату для следующего шага
        await update.message.reply_text("Теперь введите сумму для конвертации (например, 100):")
        return WAITING_FOR_CONVERT_AMOUNT

    except Exception as e:
        await update.message.reply_text(f"Произошла ошибка: {e}")
        return ConversationHandler.END

# Обработчик ввода суммы для команды /convert
async def get_convert_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = float(update.message.text.strip())
        context.user_data['amount'] = amount  # Сохраняем сумму для следующего шага

        await update.message.reply_text("Теперь введите код валюты, из которой хотите конвертировать (например, USD):")
        return WAITING_FOR_CONVERT_FROM

    except ValueError:
        await update.message.reply_text("Некорректный формат суммы. Пожалуйста, введите число.")
        return WAITING_FOR_CONVERT_AMOUNT

# Обработчик ввода валюты из которой конвертируем для команды /convert
async def get_convert_from(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['from_currency'] = update.message.text.strip().upper()  # Сохраняем валюту
    await update.message.reply_text("Теперь введите код валюты, в которую хотите конвертировать (например, RUB):")
    return WAITING_FOR_CONVERT_TO

# Обработчик ввода валюты в которую конвертируем для команды /convert
async def get_convert_to(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    to_currency = update.message.text.strip().upper()
    amount = context.user_data['amount']
    from_currency = context.user_data['from_currency']
    date = context.user_data['date']

    # Конвертируем валюту
    result = convert_currency(amount, from_currency, to_currency, date)
    await update.message.reply_text(result)
    return ConversationHandler.END  # Завершаем разговор

# Главная функция
async def main():
    # Вставьте ваш токен сюда
    TOKEN = "7833948236:AAH_85ShBig9RHNDR20BqClKjMmZdJNoPk0"

    # Создаём приложение
    application = Application.builder().token(TOKEN).build()

    # Регистрируем обработчики команд
    application.add_handler(CommandHandler("start", start))

    # Настройка ConversationHandler для обработки команды /rate
    rate_conversation = ConversationHandler(
        entry_points=[CommandHandler("rate", rate)],
        states={
            WAITING_FOR_RATE_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_rate),
            ],
            WAITING_FOR_RATE_CURRENCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_currency),
            ],
        },
        fallbacks=[],
    )

    # Настройка ConversationHandler для обработки команды /convert
    convert_conversation = ConversationHandler(
        entry_points=[CommandHandler("convert", convert)],
        states={
            WAITING_FOR_CONVERT_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_convert_date),
            ],
            WAITING_FOR_CONVERT_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_convert_amount),
            ],
            WAITING_FOR_CONVERT_FROM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_convert_from),
            ],
            WAITING_FOR_CONVERT_TO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_convert_to),
            ],
        },
        fallbacks=[],
    )

    # Добавляем обработчики команд
    application.add_handler(rate_conversation)
    application.add_handler(convert_conversation)

    # Запуск бота
    await application.run_polling()

# Запуск бота
await main()